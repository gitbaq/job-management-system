{"version":3,"sources":["components/Header.js","components/Footer.js","components/Jobslist.js","components/Note.js","App.js","reportWebVitals.js","index.js"],"names":["Header","Footer","currentYear","Date","getFullYear","Jobslist","props","getData","fetch","url","then","res","json","result","setState","isLoaded","items","intervalID","setTimeout","bind","error","jobStatus","status","state","this","clearTimeout","href","target","message","Container","fluid","Row","className","length","CardDeck","map","postData","id","jobName","Component","Note","content","src","img","alt","header","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iNAOeA,MALf,WACE,OAAO,mCACL,yDADK,QCKMC,MANf,WAEE,IAAMC,GAAc,IAAIC,MAAOC,cAC/B,OAAO,iCAAQ,gDAAqBF,Q,8DCKjBG,E,kDAIjB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IA0BZC,QAAU,WACRC,MAAM,EAAKC,KAERC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACE,SAACG,GAEC,EAAKC,SAAS,CAEZC,UAAU,EACVC,MAAMH,IAGR,EAAKI,WAAaC,WAAW,EAAKX,QAAQY,KAAb,gBAAyB,QAMxD,SAACC,GACC,EAAKN,SAAS,CACZC,UAAU,EACVK,cA/CL,EAAKC,UAAYf,EAAMgB,OACvB,EAAKb,IAAI,wCAAwC,EAAKY,UACtD,EAAKE,MAAQ,CACXH,MAAO,KACPL,UAAU,EACVC,MAAO,IAPQ,E,qDAYnB,WACEQ,KAAKjB,Y,kCAIX,WAOEkB,aAAaD,KAAKP,c,oBA+Bd,WACE,MAAmCO,KAAKD,MAAhCH,EAAR,EAAQA,MAAOL,EAAf,EAAeA,SAAUC,EAAzB,EAAyBA,MACzB,OAAa,MAATI,EACK,0CAAY,mBAAGM,KAAMF,KAAKf,IAAKkB,OAAO,SAA1B,kBAAZ,IAAyDP,EAAMQ,WAC5Db,EAIR,mCAEE,eAACc,EAAA,EAAD,CAAWC,OAAO,EAAlB,UACE,cAACC,EAAA,EAAD,UAAK,sBAAKC,UAAU,QAAf,8BAAyCR,KAAKH,UAA9C,KAA2DL,EAAMiB,YACtE,cAACF,EAAA,EAAD,UACE,cAACG,EAAA,EAAD,CAAUF,UAAU,eAApB,SAEGhB,EAAMmB,KAAI,SAACC,GAEV,OACG,6BACEA,EAASC,GAAK,KAAOD,EAASE,sBAdxC,iD,GAhEqBC,aCCrBC,MAPjB,SAAclC,GACZ,OAAS,sBAAM0B,UAAY,OAAlB,cAA2B,qBAAKA,UAAU,OAAf,cAAwB1B,EAAMgB,OAA9B,OAA4C,4BAAIhB,EAAMmC,UAAjF,IAA+F,qBAAKC,IAAK,UAAUpC,EAAMqC,IAAKC,IAAKtC,EAAMuC,SAClJ,cAAC,EAAD,CAAUvB,OAAQhB,EAAMgB,OAAxB,oBCoBawB,MAjBf,WACE,OACE,qBAAKd,UAAU,MAAf,SAEE,mCACA,cAAC,EAAD,IACA,cAAC,EAAD,CAAMa,OAAO,cAAcJ,QAAQ,WAAWE,IAAI,YAAYrB,OAAO,MACrE,cAAC,EAAD,CAAMuB,OAAO,eAAeJ,QAAQ,UAAUE,IAAI,cAAcrB,OAAO,MACvE,cAAC,EAAD,CAAMuB,OAAO,gBAAgBJ,QAAQ,aAAaE,IAAI,cAAcrB,OAAO,MAC3E,cAAC,EAAD,CAAMuB,OAAO,gBAAgBJ,QAAQ,SAASE,IAAI,cAAcrB,OAAO,MACvE,cAAC,EAAD,UCPSyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvC,MAAK,YAAkD,IAA/CwC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3506b3cb.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return <header>\n    <h1> Job Management System </h1> </header>;\n}\n\nexport default Header;","import React from \"react\";\n\nfunction Footer() {\n\n  const currentYear = new Date().getFullYear();\n  return <footer><p>Copyright &copy; {currentYear}</p></footer>;\n}\n\nexport default Footer;","import React, {Component} from \"react\";\n\nimport CardDeck from \"react-bootstrap/CardDeck\";\nimport Card from \"react-bootstrap/Card\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\n\n//data for post\n// import data from \"./jobs.json\";\n\nexport default class Jobslist extends Component {\n    jobStatus;\n    url;\n    intervalID;\n    constructor(props) {\n      super(props);\n      this.jobStatus = props.status;\n      this.url=\"http://localhost:8080/jobs/v1/status/\"+this.jobStatus;\n      this.state = {\n        error: null,\n        isLoaded: true,\n        items: [],\n        \n      };\n    }\n\n    componentDidMount() {\n      this.getData();\n    \n}\n\ncomponentWillUnmount() {\n  /*\n    stop getData() from continuing to run even\n    after unmounting this component. Notice we are calling\n    'clearTimeout()` here rather than `clearInterval()` as\n    in the previous example.\n  */\n  clearTimeout(this.intervalID);\n}\n\ngetData = () =>{\n  fetch(this.url)\n    \n    .then(res => res.json())\n    .then(\n       (result) => {\n          // console.log(\">>>> \"+ result);\n         this.setState({\n          \n           isLoaded: true,\n           items:result\n          \n         });\n         this.intervalID = setTimeout(this.getData.bind(this), 500);\n         // console.log(\"<<<<<<< \"+ this.state.items);\n       },\n       // Note: it's important to handle errors here\n       // instead of a catch() block so that we don't swallow\n       // exceptions from actual bugs in components.\n       (error) => {\n         this.setState({\n           isLoaded: true,\n           error\n         });\n       }\n     )\n}\n    \n      render() {\n        const { error, isLoaded, items } = this.state;\n        if (error != null) {\n          return <div>Error: <a href={this.url} target=\"_blank\">Link</a> {error.message}</div>;\n        } else if (!isLoaded) {\n          return <div>Loading...</div>;\n        } else {\n          return (\n            <>\n            \n              <Container fluid={true}>\n                <Row><div className=\"title\">Jobs with status {this.jobStatus}: {items.length}</div></Row>\n                <Row>\n                  <CardDeck className=' no-gutters '>\n                    {/* <ul> */}\n                    {items.map((postData) => {\n                      // console.log(postData);\n                      return (\n                         <li>\n                          {postData.id + \". \" + postData.jobName}\n                          </li>\n                        // <Card  key={postData.id}>\n                        //   {/* <Card.Img variant=\"top\" src={postData.image} /> */}\n                        //   <Card.Body>\n                        //     <Card.Title >\n                        //       {postData.id + \". \" + postData.jobName}\n                        //     </Card.Title>\n                        //     <Card.Subtitle >\n                        //       {/* {postData.add_dt + \" \" + postData.addCd} */}\n                        //     </Card.Subtitle>\n      \n                        //     <Card.Text >\n                        //       {/* {postData.jobDesc} */}\n                              \n                        //     </Card.Text>\n                        //   </Card.Body>\n                        // </Card>\n                      );\n                    })}\n                    {/* </ul> */}\n                  </CardDeck>\n                </Row>\n              </Container>\n            </>\n          );\n        }\n      }\n    }","import React from \"react\";\n\nimport JobsList from \"./Jobslist\";\n\nfunction Note(props) {\n  return ( < div className = \"note\" > < h1 className=\"name\"> {props.status} < /h1><p>{props.content}</p > <img src={\"images/\"+props.img} alt={props.header}/>\n  <JobsList status={props.status}>||</JobsList>\n  {/* <DefaultPost></DefaultPost> */}\n  < /div>);\n  }\n\n  export default Note;","//import logo from './logo.svg';\nimport './App.css';\nimport Header from \"./components/Header\";\n  import Footer from \"./components/Footer\";\n  import Note from \"./components/Note\";\n\n  \n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\"> */}\n      <header>\n      <Header/>\n      <Note header=\"Jobs Queued\" content=\"Queued 2\" img=\"queue.png\" status=\"Q\"/>\n      <Note header=\"Jobs Running\" content=\"Running\" img=\"running.png\" status=\"R\"/>\n      <Note header=\"Jobs Finished\" content=\"Successful\" img=\"success.png\" status=\"S\"/>\n      <Note header=\"Jobs Finished\" content=\"Failed\" img=\"failure.png\" status=\"F\"/>\n      <Footer/>\n        \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}